# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Setup Gradle
        run: |
          chmod +x gradlew
      - name: Gradle Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Cache Sonar
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build with Gradle
        run: ./gradlew build

      - name: Cache Code Climate reporter
        id: cc-cache
        uses: actions/cache@2
        with:
          path: cc-test-reporter
          key: ${{ runner.os }}-codeclimate
      - name: Download Code Climate test-reporter
        if: steps.cc-cache.outputs.cache-hit != 'true'
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
      - name: Setup Code Climate test-reporter
        run: ./cc-test-reporter before-build

  build:
    name: Build
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: "Gradle Build"
        run: "./gradlew build"
  testing:
    runs-on: ubuntu-latest
    name: Testing
    needs:
      - build
    environment: CI_CD
    steps:
      - name: "Run Unit tests"
        run: "./gradlew test"
      - name: "Run verification"
        run: "./gradlew check"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: commit-code-coverage
        env:
          MODULES: "core lists observer utils"
          CC_TEST_REPORTER_ID: ${{ secrets.CC_RUNNER_TOKEN }}
        run: |
          for i in $MODULES; do
            echo "$i"
            export JACOCO_SOURCE_PATH=$(pwd)/$i/src/main/java/
            ./cc-test-reporter format-coverage $(pwd)/$i/build/reports/jacoco/coverage.xml --input-type jacoco
            ./cc-test-reporter upload-coverage
          done
  clean:
    runs-on: ubuntu-latest
    needs:
      - testing
    name: "Clean"
    steps:
      - name: "Stop Gradle deamon"
        run: "./gradlew --stop"
